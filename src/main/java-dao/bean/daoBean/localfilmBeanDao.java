package bean.daoBean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCALFILM_BEAN".
*/
public class localfilmBeanDao extends AbstractDao<localfilmBean, Long> {

    public static final String TABLENAME = "LOCALFILM_BEAN";

    /**
     * Properties of entity localfilmBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property IsNew = new Property(3, String.class, "isNew", false, "IS_NEW");
        public final static Property BuildDate = new Property(4, String.class, "buildDate", false, "BUILD_DATE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Introduce = new Property(8, String.class, "introduce", false, "INTRODUCE");
        public final static Property Img = new Property(9, String.class, "img", false, "IMG");
        public final static Property Date = new Property(10, String.class, "date", false, "DATE");
        public final static Property Tag = new Property(11, String.class, "tag", false, "TAG");
        public final static Property Comment = new Property(12, String.class, "comment", false, "COMMENT");
    }


    public localfilmBeanDao(DaoConfig config) {
        super(config);
    }
    
    public localfilmBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCALFILM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID\" TEXT NOT NULL ," + // 1: ID
                "\"PATH\" TEXT," + // 2: path
                "\"IS_NEW\" TEXT," + // 3: isNew
                "\"BUILD_DATE\" TEXT," + // 4: buildDate
                "\"NAME\" TEXT," + // 5: name
                "\"FROM\" TEXT," + // 6: from
                "\"URL\" TEXT," + // 7: url
                "\"INTRODUCE\" TEXT," + // 8: introduce
                "\"IMG\" TEXT," + // 9: img
                "\"DATE\" TEXT," + // 10: date
                "\"TAG\" TEXT," + // 11: tag
                "\"COMMENT\" TEXT);"); // 12: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCALFILM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, localfilmBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getID());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindString(4, isNew);
        }
 
        String buildDate = entity.getBuildDate();
        if (buildDate != null) {
            stmt.bindString(5, buildDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(9, introduce);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(10, img);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(11, date);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(12, tag);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, localfilmBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getID());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindString(4, isNew);
        }
 
        String buildDate = entity.getBuildDate();
        if (buildDate != null) {
            stmt.bindString(5, buildDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(9, introduce);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(10, img);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(11, date);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(12, tag);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public localfilmBean readEntity(Cursor cursor, int offset) {
        localfilmBean entity = new localfilmBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isNew
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buildDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // introduce
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // img
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // date
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tag
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // comment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, localfilmBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsNew(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBuildDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIntroduce(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setComment(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(localfilmBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(localfilmBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(localfilmBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
